import os, sys,subprocess
import numpy as np
import calculate_rmsd as rmsd

#Setting paths
SHELL_PATH="/home/sigbjobo/Projects/DNA/DNA_Hybrid_particle_field/DNA_ANALYSIS_CODE/shell"
PYTHON_PATH="/home/sigbjobo/Projects/DNA/DNA_Hybrid_particle_field/DNA_ANALYSIS_CODE/python"
EXTRA_PATH="/home/sigbjobo/Stallo/Projects/DNA/DNA_Hybrid_particle_field/DNA_CODE_PLOT/DNA_ANALYSIS_CODE/python"
from scipy.spatial.distance import cdist
sys.path.append(SHELL_PATH)
sys.path.append(PYTHON_PATH)
sys.path.append(EXTRA_PATH)

import ana_prot as ANA

def ana_sim(fn,start=10):
    fp = open(fn,'r')
#    fp_rmsd=open('rmsd.xyz','w')
#    fp_cent=open('center.xyz','w')
    a=[]
    on=1
    [fp, r_p, _, rn, L, on] = ANA.read_frame(fp)
  
 
    r0= np.vstack((r_p,_,rn))
#    map0=contact_map(r)
#    rel=(map0>0)
#    a_exact=np.array([100.,10.,0.338,0.94])
 #   ai=np.zeros(4)
 
    z=[]
    while(on):
        #Compute pairs
        # r1 = rn[:len(rn)//2]
        
        # r2 = rn[len(rn)//2:][::-1]        
        # for i in range(len(r2)):
        #     r2[i] = ANA.period_2d(r1[i], r2[i], L)
        # ai[0] = np.mean(np.array(0.1*np.linalg.norm(r1 - r2, axis = 1) < 1, dtype = float))*100.
        
        # rp=np.array(r_p)
        
        # dat1=(r_p[:len(r_p)//2])[3:-3]
        # ANA.kahn(dat1)

        # dat2=(r_p[len(r_p)//2:])[3:-3]
        # [d1, r1, ang1]= ANA.Parseq(dat1)
        # [d2, r2, ang2]= ANA.Parseq(dat2)
        
        # ai[1]=0.5*(np.mean(360./ang1)+np.mean(360./ang2))
        # ai[2]=0.1*0.5*(np.mean(np.linalg.norm(d1))+np.mean(np.linalg.norm(d2)))
        # ai[3]=0.1*0.5*(np.mean(r1)+np.mean(r2))
        r=np.vstack((r_p,_,rn))
#        fp_rmsd=write_rmsd(fp_rmsd,fp_cent,r,r0)
       # zi
        #map1=contact_map(r,L)
     #   print(np.mean(np.abs(map0-map1))) 
     #   zi=np.mean(((a_exact-ai)/a_exact)**2)

       
        zi=ANA.rmsd_dist(r0,r)#=np.mean(np.abs((map0[rel]-map1[rel])))
#        print(zi)
        z.append(zi)
        [fp, r_p, _, rn, L, on] = ANA.read_frame(fp)
    z=z[start:]
    
    return [np.mean(z), np.std(z)]

 
def func_para():

    #START SIMULATION 
    subprocess.call("bash %s/evaluate_fitness.sh"%(SHELL_PATH), shell=True)

    #LIST ALL SIMULATIONS
    folds = ANA.list_sim_fold()

    #ANALYZE CURRENT SIMULATION
    [z,z_std] = ana_sim('%s/sim.xyz'%(folds[-1]))

    #STORE FITNESS
    fp = open('../opt.dat','a')
    fp.write("%s %s %s %s %f %f\n"%(os.environ['alpha'], os.environ['beta'], os.environ['PP'], os.environ['PW'], -z, z_std))
    fp.close()

    #RETURN FITNESS
    return z



